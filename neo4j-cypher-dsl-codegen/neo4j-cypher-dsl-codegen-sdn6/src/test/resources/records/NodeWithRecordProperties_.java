package org.neo4j.cypherdsl.codegen.sdn6.models.records;

import java.util.List;
import javax.annotation.processing.Generated;
import org.neo4j.cypherdsl.core.MapExpression;
import org.neo4j.cypherdsl.core.NodeBase;
import org.neo4j.cypherdsl.core.NodeLabel;
import org.neo4j.cypherdsl.core.Properties;
import org.neo4j.cypherdsl.core.Property;
import org.neo4j.cypherdsl.core.SymbolicName;

@Generated(value = "org.neo4j.cypherdsl.codegen.core.NodeImplBuilder", date = "2019-09-21T21:21:00+01:00",
		comments = "This class is generated by the Neo4j Cypher-DSL. All changes to it will be lost after regeneration.")
public final class NodeWithRecordProperties_ extends NodeBase<NodeWithRecordProperties_> {

	public static final String $PRIMARY_LABEL = "NodeWithRecordProperties";

	public static final NodeWithRecordProperties_ NODE_WITH_RECORD_PROPERTIES = new NodeWithRecordProperties_();

	public final Property ID = this.property("id");

	public final Property RECORD_AS_PROPERTY_WITH_CONVERSION = this.property("recordAsPropertyWithConversion");

	public final Property YOLOING_NO_CONVERSION = this.property("yoloingNoConversion");

	public final RecordAsRelationship_ RECORD_AS_RELATIONSHIP = new RecordAsRelationship_(this,
			RecordTarget_.RECORD_TARGET);

	public NodeWithRecordProperties_() {
		super($PRIMARY_LABEL);
	}

	private NodeWithRecordProperties_(SymbolicName symbolicName, List<NodeLabel> labels, Properties properties) {
		super(symbolicName, labels, properties);
	}

	@Override
	public NodeWithRecordProperties_ named(SymbolicName newSymbolicName) {
		return new NodeWithRecordProperties_(newSymbolicName, getLabels(), getProperties());
	}

	@Override
	public NodeWithRecordProperties_ withProperties(MapExpression newProperties) {
		return new NodeWithRecordProperties_(getSymbolicName().orElse(null), getLabels(),
				Properties.create(newProperties));
	}

}
